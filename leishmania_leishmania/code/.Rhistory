ggplot(pcoa_data, aes(x=V2)) +
geom_histogram(aes(fill = MSW05_Order))
ggplot(pcoa_data, aes(x=V1)) +
geom_histogram(aes(fill = MSW05_Order))
ggplot(pcoa_data, aes(x=V1)) +
geom_histogram(aes(fill = MSW05_Order))
ggplot(pcoa_data, aes(x=V2)) +
geom_histogram(aes(fill = MSW05_Order))
ggplot(pcoa_data, aes(x=V4)) +
geom_histogram(aes(fill = MSW05_Order))
ggplot(pcoa_data, aes(x=V5)) +
geom_histogram(aes(fill = MSW05_Order))
ggplot(pcoa_data, aes(x=V6)) +
geom_histogram(aes(fill = MSW05_Order))
ggplot(pcoa_data, aes(x=V1)) +
geom_histogram(aes(fill = MSW05_Order))
# install packages, load libraries
pacman::p_load(tidyverse, dplyr, kableExtra, knitr, sf, raster, terra, spData,
spDataLarge, tmap, leaflet, ggplot2, spThin, mapdata, rnaturalearth,
rnaturalearthdata, devtools, brazilmaps, mapview, grid,
gridExtra, RColorBrewer, randomForest, caret, caTools, pdp,
tidyr, dismo, dismotools, sp, enmSdm, grpregOverlap, stats)
#------------------------------------------------------
# EXPERT SNAIL DATA
# Load RDS file
environmental_covariate_df <- readRDS(file = "/Users/carolineglidden/Desktop/schisto sdm/multi-scale-sdm-schisto/final_data/clean_data/expert_snails_gbif_all_aquatic.rds")
#environmental_covariate_df <- environmental_covariate_df[,-(ncol(environmental_covariate_df)-1)]
# Catch all to remove any incomplete rows
environmental_covariate_df <- environmental_covariate_df[complete.cases(environmental_covariate_df), ]
#------------------------------------------------------
# Build target species rows
#------------------------------------------------------
# set target species
target_species_string <- 'glabrata' #, 'tenagophila', 'straminea'
occ.target <- environmental_covariate_df %>%
filter(species  == target_species_string) #%>% #filter by target species
#filter(!is.na(year)); #and remove NAs
#make lat/lon df to be read by thin() function
occ_target_lat_lon <- as.data.frame(occ.target[,c("species", "longitude", "latitude")]); occ_target_lat_lon$latitude <- as.numeric(occ_target_lat_lon$latitude); occ_target_lat_lon$longitude <- as.numeric(occ_target_lat_lon$longitude)
#new thinning procedure (AS: 07/17/2022)
rast <- raster("/Users/carolineglidden/Desktop/schisto sdm/multi-scale-sdm-schisto/final_data/env_data/national/bio4_temp_.tif")
#one point per grid cell
s <- gridSample(occ_target_lat_lon[2:3], rast, n=1)
thin.occ <- occ.target[row.names(s),]; thin.occ <- thin.occ[complete.cases(thin.occ), ] #283 obs w/out gbif & 307 w/gbif
thin.occ$presence <- 1
#------------------------------------------------------
# Build background species / background mask rows
#------------------------------------------------------
# Limit to background species (non target species, non wo specification)
bg_df <- environmental_covariate_df %>%
filter(!species %in% c(target_species_string, '', 'sp.'))
#table(bg_df$species)
#dim(bg_df)
# Read in template raster and list setup
bg_species_list <- unique(bg_df$species)
# Extract number of Insecta (+ supplemental) background points per grid cell (i.e., weighted bias mask)
bg_points <- bg_df %>% dplyr::select(c(longitude, latitude)) %>%
as.matrix()
bg_df$index <- c(1:dim(bg_df)[1])
bg_longlat <- cellFromXY(rast, bg_points) %>% as.data.frame() %>%
cbind(bg_df$year) %>%
cbind(bg_df$index) %>%
mutate(count = 1) %>% setNames(c("cell","year","index","count")) %>%
group_by(cell) %>% dplyr::summarize(count = sum(count),
max_year = max(year),
avg_year = mean(year),
max_index = max(index)) %>%
# arrange(desc(count)) %>%
mutate(longitude = xFromCell(rast, cell),  # Acquire longitude (x) and latitude (y) from cell centroids
latitude = yFromCell(rast, cell)) %>%
dplyr::select(-cell) %>% # Cell number is now obsolete, since will be working from (x,y) as an sf object
filter(!is.na(longitude) & !is.na(latitude)) # Remove the NA locations
#bg_longlat
#write.csv(bg_longlat, "~/Desktop/bgmask_glabrata.csv")
#bg_mask <- read.csv("bgmask_glabrata.csv")
# Build geometries
bg_mask_sf_full <- st_as_sf(bg_longlat, coords = c("longitude","latitude"),
agr = "constant", crs = 4326)
# Random sample bg without replacement from weighted bias mask at (1.5x occ) multiplier
set.seed(9)
multiplier <- 2
bg_mask_weights <- bg_mask_sf_full %>%
mutate(weight = count/sum(count))
bg_mask_df <- bg_mask_sf_full[sample(nrow(bg_mask_weights),
size = multiplier * nrow(thin.occ),
replace = FALSE,
prob = bg_mask_weights$weight),]
bg_final_data <- bg_df[bg_mask_df$max_index,]
bg_final_data$presence <- 0
#combine data
all_data <- rbind(thin.occ, bg_final_data[,-(ncol(bg_final_data)-1)])
#------------------------------------------------------
# Now assign each point a region in Brazil
#------------------------------------------------------
all_data_sf <- st_as_sf(all_data, coords = c("longitude","latitude"),
agr = "constant", crs = 4326)
brazil_regions <- geobr::read_region(year=2019, showProgress = FALSE)
all_data_sf <- all_data_sf %>% st_set_crs(st_crs(brazil_regions))
all_data_regions <- st_intersection(all_data_sf, brazil_regions)
##assign spatial blocks for spatial-cv
# spatial blocking by specified range with random assignment
#https://cran.r-project.org/web/packages/blockCV/vignettes/BlockCV_for_SDM.html
env_data <- list.files(path="/Users/carolineglidden/Desktop/schisto sdm/multi-scale-sdm-schisto/final_data/env_data/national", pattern="tif", all.files=FALSE, full.names=TRUE,recursive=TRUE)
env_data <- env_data[-26]
e <- raster::stack(env_data)
all_data_regions <- all_data_regions %>% st_set_crs(st_crs(e))
# sac <- spatialAutoRange(rasterLayer = e, #need to try and get smaller blocks, run overnight
#                         sampleNumber = 100000,
#                         doParallel = TRUE,
#                         showPlots = TRUE,
#                         progress = TRUE)
#
# sb <- spatialBlock(speciesData = all_data_regions,
#                    species = "presence",
#                    #rasterLayer = awt,
#                    theRange = 2638313, # size of the blocks
#                    k = 5,
#                    selection = "random",
#                    iteration = 100, # find evenly dispersed folds
#                    biomod2Format = TRUE,
#                    xOffset = 0, # shift the blocks horizontally
#                    yOffset = 0)
sb2 <- blockCV::spatialBlock(speciesData = all_data_regions,
species = "presence",
rasterLayer = e,
rows = 10,
cols = 10,
k = 10,
selection = "systematic",
biomod2Format = TRUE)
all_data_regions$spatialCV_fold <- sb2$foldID
all_data_regions <- st_drop_geometry(all_data_regions)
#------------------------------------------------------
# Now remove highly correlated variables
#------------------------------------------------------
library(corrplot)
m <- cor(all_data_regions[2:55])
corrplot(m, method="circle")
updated_data <- all_data_regions[,c(57, 1:2, 4:7, 12, 13,
17:21, 24, 31, 34, 35,
37:45, 47, 48, 50:55, 59, 60)]
m2 <- cor(updated_data[6:32])
corrplot(m2, method="circle")
analysis_data <- updated_data[,c(1, 4:37)]
names(analysis_data)
write.csv(names(analysis_data), "table_final_covar_sources.csv")
dir()
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
src_tbl <- read.csv("/Users/carolineglidden/Desktop/schisto sdm/multi-scale-sdm-schisto/final_data/model_output_august22/table_final_covar_sources.csv")
library(knitr)
src_tbl <- read.csv("/Users/carolineglidden/Desktop/schisto sdm/multi-scale-sdm-schisto/final_data/model_output_august22/table_final_covar_sources.csv")
kable(src_tbl, caption = "covariates and data sources, all at 1km or aggregated to 1km")
?kable
library(knitr)
src_tbl <- read.csv("/Users/carolineglidden/Desktop/schisto sdm/multi-scale-sdm-schisto/final_data/model_output_august22/table_final_covar_sources.csv")
kable(src_tbl,
align = 'l',
caption = "covariates and data sources, all at 1km or aggregated to 1km")
library(knitr)
src_tbl <- read.csv("/Users/carolineglidden/Desktop/schisto sdm/multi-scale-sdm-schisto/final_data/model_output_august22/table_final_covar_sources.csv")
kable(src_tbl,
align = 'l',
format = "pipe",
caption = "covariates and data sources, all at 1km or aggregated to 1km")
library(knitr)
src_tbl <- read.csv("/Users/carolineglidden/Desktop/schisto sdm/multi-scale-sdm-schisto/final_data/model_output_august22/table_final_covar_sources.csv")
kable(src_tbl,
align = 'l',
format = 'pipe',
caption = "covariates and data sources, all at 1km or aggregated to 1km")
library(knitr)
src_tbl <- read.csv("/Users/carolineglidden/Desktop/schisto sdm/multi-scale-sdm-schisto/final_data/model_output_august22/table_final_covar_sources.csv")
kable(src_tbl,
align = 'l',
format = 'pipe',
caption = "covariates and data sources, all at 1km or aggregated to 1km")
library(knitr)
src_tbl <- read.csv("/Users/carolineglidden/Desktop/schisto sdm/multi-scale-sdm-schisto/final_data/model_output_august22/table_final_covar_sources.csv")
kable(src_tbl,
align = 'l',
format = 'pipe',
caption = "covariates and data sources, all at 1km or aggregated to 1km")
######Figures for leish host paper
library(ggplot2)
library(tidyr)
library(dplyr)
library(sf)
library(raster)
library(foreach)
library(speciesgeocodeR)
phylo_importance <- read.csv("/Users/carolineglidden/Desktop/reservoir hosts - FINAL/leishmania_leishmania/output/shapley variable importance leishmania july 11 2022.csv")
phylo_importance <- phylo_importance[phylo_importance$Feature %in% c("V1", "V2", "V3", "V4", "V5", "V6"), ]
mean_phylo_importance <- aggregate(mean_shap_score ~ Feature, data = phylo_importance,
FUN = function(x) c(mean = mean(x),
median = quantile(x, probs = 0.5),
lower.q = quantile(x, probs = 0.05),
upper.q = quantile(x, probs = 0.95)))
pcoa_data <- readRDS("/Users/carolineglidden/Desktop/reservoir hosts - FINAL/leishmania_leishmania/cleaned data/analysis data/total data.rds")
pcoa_data <- pcoa_data[, c("MSW05_Order", "V1", "V2", "V3", "V4", "V5", "V6")]
pcoa_pdp <- read.csv("/Users/carolineglidden/Desktop/reservoir hosts - FINAL/leishmania_leishmania/output/shapley dependence leishmania july 11 2022.csv")
pcoa_pdp$row_code <- seq(1, nrow(pcoa_pdp), by = 1)
#split df into value & shap value; make each of them in long format; merge by feature and iteration
feature_value <- pcoa_pdp[,c(4:60,118, 119)] %>%
tidyr::pivot_longer(cols = 1:57, #check this
names_to = "feature",
values_to = "value",
values_drop_na = FALSE)
feature_shap <- pcoa_pdp[,c(61:118, 119)] %>%
tidyr::pivot_longer(cols = 1:57, #check this
names_to = "feature",
values_to = "shap_val",
values_drop_na = FALSE)
feature_shap$feature <- substr(feature_shap$feature,1,nchar(feature_shap$feature)-2)
pcoa_pdp_df <- left_join(feature_value, feature_shap, by = c("feature","iter", "row_code")) #merge dfs again
pcoa_pdp_df <- pcoa_pdp_df[pcoa_pdp_df$feature %in% c("V1", "V2", "V3", "V4", "V5", "V6"), ]
pcoa_pdp_plot <- ggplot(pcoa_pdp_df, aes(x=value, y=shap_val)) +
#geom_point() +
#ggtitle(expression(~bold(b.)~" "~italic(L. (Leishmania))~" ")) +
stat_smooth(aes(group=iter), color='lightgrey', method='loess', size=0.5, se=FALSE) +
stat_smooth(aes(), method='loess', size=2, se=FALSE) +
#scale_color_manual(values=colors[1:2], 'trait type') + #fix colors
#geom_rug(data=shap_pdp_plot_df, aes(x=value), alpha=0.3, length=unit(0.05, "npc"), inherit.aes = FALSE, sides='b') +
facet_wrap(~feature, scales='free', ncol=4) +
theme_bw(base_size = 12) +
ylab("Shapley score") +
theme(legend.position = "none")
pcoa_pdp_plot
library(ggplot2)
library(tidyr)
library(dplyr)
library(sf)
library(raster)
library(foreach)
library(speciesgeocodeR)
library(ggplot2)
library(forcats)
library(dplyr)
library(tidyr)
library(sf)
phylo_importance <- read.csv("/Users/carolineglidden/Desktop/reservoir hosts - FINAL/vianna_leishmania/output/shapley variable importance vianna july 11 2022.csv")
phylo_importance <- read.csv("/Users/carolineglidden/Desktop/reservoir hosts - FINAL/leishmania_vianna/output/shapley variable importance vianna july 21 2022.csv")
phylo_importance <- phylo_importance[phylo_importance$Feature %in% c("V1", "V2", "V3", "V4", "V5", "V6"), ]
mean_phylo_importance <- aggregate(mean_shap_score ~ Feature, data = phylo_importance,
FUN = function(x) c(mean = mean(x),
median = quantile(x, probs = 0.5),
lower.q = quantile(x, probs = 0.05),
upper.q = quantile(x, probs = 0.95)))
pcoa_data <- readRDS("/Users/carolineglidden/Desktop/reservoir hosts - FINAL/leishmania_leishmania/cleaned data/analysis data/total data.rds")
pcoa_data <- pcoa_data[, c("MSW05_Order", "V1", "V2", "V3", "V4", "V5", "V6")]
pcoa_pdp <- read.csv("/Users/carolineglidden/Desktop/reservoir hosts - FINAL/leishmania_vianna/output/shapley dependence vianna july 21 2022.csv")
pcoa_pdp$row_code <- seq(1, nrow(pcoa_pdp), by = 1)
#split df into value & shap value; make each of them in long format; merge by feature and iteration
feature_value <- pcoa_pdp[,c(4:60,118, 119)] %>%
tidyr::pivot_longer(cols = 1:57, #check this
names_to = "feature",
values_to = "value",
values_drop_na = FALSE)
feature_shap <- pcoa_pdp[,c(61:118, 119)] %>%
tidyr::pivot_longer(cols = 1:57, #check this
names_to = "feature",
values_to = "shap_val",
values_drop_na = FALSE)
feature_shap$feature <- substr(feature_shap$feature,1,nchar(feature_shap$feature)-2)
pcoa_pdp_df <- left_join(feature_value, feature_shap, by = c("feature","iter", "row_code")) #merge dfs again
pcoa_pdp_df <- pcoa_pdp_df[pcoa_pdp_df$feature %in% c("V1", "V2", "V3", "V4", "V5", "V6"), ]
mean_phylo_importance
phylo_dimensions_imp_plot <- ggplot(mean_phylo_importance, aes(x = reorder(Feature, mean_shap_score.lower.q.5.), y = mean_shap_score.mean)) +
geom_point(size = 3) + xlab('feature') + ylab('mean |SHAP value|') +
#ggtitle(expression(~bold(a.)~" "~italic(L. (Vianna))~" ")) +
geom_errorbar(aes(ymin = mean_shap_score.lower.q.5., ymax = mean_shap_score.upper.q.95.), position = "dodge", width = 0.4, size = 1.5) +
#scale_color_manual(values=colors, 'trait type') +
coord_flip() +
theme_bw(base_size = 12)
phylo_dimensions_imp_plot
ggplot(mean_phylo_importance, aes(x = reorder(Feature, mean_shap_score.lower.q.5%), y = mean_shap_score.mean)) +
geom_point(size = 3) + xlab('feature') + ylab('mean |SHAP value|') +
#ggtitle(expression(~bold(a.)~" "~italic(L. (Vianna))~" ")) +
geom_errorbar(aes(ymin = mean_shap_score.lower.q.5%, ymax = mean_shap_score.upper.q.95%), position = "dodge", width = 0.4, size = 1.5) +
#scale_color_manual(values=colors, 'trait type') +
coord_flip() +
theme_bw(base_size = 12)
names(mean_phylo_importance)
mean_phylo_importance <- do.call(data.frame, mean_phylo_importance)
names(mean_phylo_importance)
phylo_dimensions_imp_plot <- ggplot(mean_phylo_importance, aes(x = reorder(Feature, mean_shap_score.lower.q.5.), y = mean_shap_score.mean)) +
geom_point(size = 3) + xlab('feature') + ylab('mean |SHAP value|') +
#ggtitle(expression(~bold(a.)~" "~italic(L. (Vianna))~" ")) +
geom_errorbar(aes(ymin = mean_shap_score.lower.q.5., ymax = mean_shap_score.upper.q.95.), position = "dodge", width = 0.4, size = 1.5) +
#scale_color_manual(values=colors, 'trait type') +
coord_flip() +
theme_bw(base_size = 12)
phylo_dimensions_imp_plot
phylo_dimensions_imp_plot <- ggplot(mean_phylo_importance, aes(x = reorder(Feature, mean_shap_score.lower.q.5.), y = mean_shap_score.mean)) +
geom_point(size = 3) + xlab('PCoA dimension') + ylab('mean |SHAP value|') +
#ggtitle(expression(~bold(a.)~" "~italic(L. (Vianna))~" ")) +
geom_errorbar(aes(ymin = mean_shap_score.lower.q.5., ymax = mean_shap_score.upper.q.95.), position = "dodge", width = 0.4, size = 1.5) +
#scale_color_manual(values=colors, 'trait type') +
coord_flip() +
theme_bw(base_size = 12)
phylo_dimensions_imp_plot
ggsave(phylo_dimensions_imp_plot, "vianna_phylo_trait_imp.png")
phylo_dimensions_imp_plot <- ggplot(mean_phylo_importance, aes(x = reorder(Feature, mean_shap_score.lower.q.5.), y = mean_shap_score.mean)) +
geom_point(size = 3) + xlab('PCoA dimension') + ylab('mean |SHAP value|') +
#ggtitle(expression(~bold(a.)~" "~italic(L. (Vianna))~" ")) +
geom_errorbar(aes(ymin = mean_shap_score.lower.q.5., ymax = mean_shap_score.upper.q.95.), position = "dodge", width = 0.4, size = 1.5) +
#scale_color_manual(values=colors, 'trait type') +
coord_flip() +
theme_bw(base_size = 12)
ggsave("vianna_phylo_trait_imp.png", phylo_dimensions_imp_plot)
pcoa_data <- readRDS("/Users/carolineglidden/Desktop/reservoir hosts - FINAL/leishmania_leishmania/cleaned data/analysis data/total data.rds")
pcoa_data <- pcoa_data[, c("MSW05_Order", "V2", "V6")]
pcoa_pdp <- read.csv("/Users/carolineglidden/Desktop/reservoir hosts - FINAL/leishmania_vianna/output/shapley dependence vianna july 21 2022.csv")
pcoa_pdp$row_code <- seq(1, nrow(pcoa_pdp), by = 1)
#split df into value & shap value; make each of them in long format; merge by feature and iteration
feature_value <- pcoa_pdp[,c(4:60,118, 119)] %>%
tidyr::pivot_longer(cols = 1:57, #check this
names_to = "feature",
values_to = "value",
values_drop_na = FALSE)
feature_shap <- pcoa_pdp[,c(61:118, 119)] %>%
tidyr::pivot_longer(cols = 1:57, #check this
names_to = "feature",
values_to = "shap_val",
values_drop_na = FALSE)
feature_shap$feature <- substr(feature_shap$feature,1,nchar(feature_shap$feature)-2)
pcoa_pdp_df <- left_join(feature_value, feature_shap, by = c("feature","iter", "row_code")) #merge dfs again
#split df into value & shap value; make each of them in long format; merge by feature and iteration
feature_value <- pd_df_iter_vianna[,c(4:58,114, 115)] %>%
tidyr::pivot_longer(cols = 1:55, #check this
names_to = "feature",
values_to = "value",
values_drop_na = FALSE)
feature_shap <- pd_df_iter_vianna[,c(59:115)] %>%
tidyr::pivot_longer(cols = 1:55, #check this
names_to = "feature",
values_to = "shap_val",
values_drop_na = FALSE)
feature_shap$feature <- substr(feature_shap$feature,1,nchar(feature_shap$feature)-2)
shap_pdp_df <- left_join(feature_value, feature_shap, by = c("feature","iter", "row_code")) #merge dfs again
feature_value <- pcoa_pdp[,c(4:58,114, 115)] %>%
tidyr::pivot_longer(cols = 1:55, #check this
names_to = "feature",
values_to = "value",
values_drop_na = FALSE)
feature_shap <- pcoa_pdp[,c(59:115)] %>%
tidyr::pivot_longer(cols = 1:55, #check this
names_to = "feature",
values_to = "shap_val",
values_drop_na = FALSE)
feature_shap$feature <- substr(feature_shap$feature,1,nchar(feature_shap$feature)-2)
shap_pdp_df <- left_join(feature_value, feature_shap, by = c("feature","iter", "row_code")) #merge dfs again
pcoa_pdp_df <- pcoa_pdp_df[pcoa_pdp_df$feature %in% c("V2", "V6"), ]
pcoa_pdp_df <- left_join(feature_value, feature_shap, by = c("feature","iter", "row_code")) #merge dfs again
pcoa_pdp_plot <- ggplot(pcoa_pdp_df, aes(x=value, y=shap_val)) +
#geom_point() +
#ggtitle(expression(~bold(b.)~" "~italic(L. (Leishmania))~" ")) +
stat_smooth(aes(group=iter), color='lightgrey', method='loess', size=0.5, se=FALSE) +
stat_smooth(aes(), method='loess', size=2, se=FALSE) +
#scale_color_manual(values=colors[1:2], 'trait type') + #fix colors
#geom_rug(data=shap_pdp_plot_df, aes(x=value), alpha=0.3, length=unit(0.05, "npc"), inherit.aes = FALSE, sides='b') +
facet_wrap(~feature, scales='free', ncol=1) +
theme_bw(base_size = 12) +
ylab("Shapley score") +
theme(legend.position = "none")
pcoa_pdp_plot
pcoa_pdp_df <- pcoa_pdp_df[pcoa_pdp_df$feature %in% c("V2", "V6"), ]
names(pcoa_pdp_df)
unique(pcoa_pdp_df$feature)
pcoa_pdp_plot <- ggplot(pcoa_pdp_df, aes(x=value, y=shap_val)) +
#geom_point() +
#ggtitle(expression(~bold(b.)~" "~italic(L. (Leishmania))~" ")) +
stat_smooth(aes(group=iter), color='lightgrey', method='loess', size=0.5, se=FALSE) +
stat_smooth(aes(), method='loess', size=2, se=FALSE) +
#scale_color_manual(values=colors[1:2], 'trait type') + #fix colors
#geom_rug(data=shap_pdp_plot_df, aes(x=value), alpha=0.3, length=unit(0.05, "npc"), inherit.aes = FALSE, sides='b') +
facet_wrap(~feature, scales='free', ncol=1) +
theme_bw(base_size = 12) +
ylab("Shapley score") +
theme(legend.position = "none")
pcoa_pdp_plot
pcoa_pdp_plot <- ggplot(pcoa_pdp_df, aes(x=value, y=shap_val)) +
#geom_point() +
#ggtitle(expression(~bold(b.)~" "~italic(L. (Leishmania))~" ")) +
stat_smooth(aes(group=iter), color='lightgrey', method='loess', size=0.5, se=FALSE) +
stat_smooth(aes(), method='loess', size=2, se=FALSE) +
#scale_color_manual(values=colors[1:2], 'trait type') + #fix colors
#geom_rug(data=shap_pdp_plot_df, aes(x=value), alpha=0.3, length=unit(0.05, "npc"), inherit.aes = FALSE, sides='b') +
facet_wrap(~feature, scales='free', ncol=1) +
theme_bw(base_size = 12) +
ylab("Shapley score") +
theme(legend.position = "none")
pcoa_pdp_plot
pcoa_pdp_plot
pcoa_data$v2_cutoff <- ifelse(pcoa_data$V2 > -25, 1, 0)
pcoa_data$v6_cutoff <- ifelse(pcoa_data$V2 > 0, 1, 0)
v2_table <- table(pcoa_data[pcoa_data$v2_cutoff == 0,])
v2_table
v2_table <- table(pcoa_data[pcoa_data$v2_cutoff == 0,]$MSW05_Order)
v2_table
v2_table_above <- table(pcoa_data[pcoa_data$v2_cutoff == 1,]$MSW05_Order)
v2_table_above
v2_table_below <- table(pcoa_data[pcoa_data$v2_cutoff == 0,]$MSW05_Order); v2_table_below$threshold <- "below"
v2_table_above <- table(pcoa_data[pcoa_data$v2_cutoff == 1,]$MSW05_Order); v2_table_above$threshold <- "below"
as.data.frame(table(pcoa_data[pcoa_data$v2_cutoff == 0,]$MSW05_Order))
v2_table_below <- as.data.frame(table(pcoa_data[pcoa_data$v2_cutoff == 0,]$MSW05_Order)); v2_table_below$threshold <- "below"
v2_table_above <- as.data.frame(table(pcoa_data[pcoa_data$v2_cutoff == 1,]$MSW05_Order)); v2_table_above$threshold <- "below"
v2_table$dimension <- "V2"
v2_table <- rbind(v2_table_below, v2_table_above)
v2_table$dimension <- "V2"
v6_table_below <- as.data.frame(table(pcoa_data[pcoa_data$v6_cutoff == 0,]$MSW05_Order)); v6_table_below$threshold <- "below"
v6_table_below
pcoa_data$v6_cutoff <- ifelse(pcoa_data$V6 > 0, 1, 0)
v6_table_below <- as.data.frame(table(pcoa_data[pcoa_data$v6_cutoff == 0,]$MSW05_Order)); v6_table_below$threshold <- "below"
v6_table_below
v6_table_above <- as.data.frame(table(pcoa_data[pcoa_data$v6_cutoff == 1,]$MSW05_Order)); v6_table_above$threshold <- "below"
v6_table_above
v6_table <- rbind(v6_table_below, v6_table_above)
v6_table$dimension <- "V6"
phlyo_table <- rbind(v2_table, v6_table)
phlyo_table
ggplot(phlyo_table, aes(x=threshold, y=Freq, fill = Var1)) +
#scale_fill_manual(values = order_colors) +
#ggtitle("b.") +
ylab("proportion of species") +
geom_bar(position="fill", stat="identity") +
facet_wrap(~dimension, scales='free', ncol=1) +
theme_classic(base_size = 12)
pcoa_data$v2_cutoff <- ifelse(pcoa_data$V2 > -25, 1, 0)
pcoa_data$v6_cutoff <- ifelse(pcoa_data$V6 > 0, 1, 0)
v2_table_below <- as.data.frame(table(pcoa_data[pcoa_data$v2_cutoff == 0,]$MSW05_Order)); v2_table_below$threshold <- "below"
v2_table_above <- as.data.frame(table(pcoa_data[pcoa_data$v2_cutoff == 1,]$MSW05_Order)); v2_table_above$threshold <- "above"
v2_table <- rbind(v2_table_below, v2_table_above)
v2_table$dimension <- "V2"
v6_table_below <- as.data.frame(table(pcoa_data[pcoa_data$v6_cutoff == 0,]$MSW05_Order)); v6_table_below$threshold <- "below"
v6_table_above <- as.data.frame(table(pcoa_data[pcoa_data$v6_cutoff == 1,]$MSW05_Order)); v6_table_above$threshold <- "above"
v6_table <- rbind(v6_table_below, v6_table_above)
v6_table$dimension <- "V6"
phlyo_table <- rbind(v2_table, v6_table)
phylo_plot <- ggplot(phlyo_table, aes(x=threshold, y=Freq, fill = Var1)) +
#scale_fill_manual(values = order_colors) +
#ggtitle("b.") +
ylab("proportion of species") +
geom_bar(position="fill", stat="identity") +
facet_wrap(~dimension, scales='free', ncol=1) +
theme_classic(base_size = 12)
phylo_plot
phlyo_table
phlyo_table <- phlyo_table[,-c(7, 18)]
ggplot(phlyo_table, aes(x=threshold, y=Freq, fill = Var1)) +
#scale_fill_manual(values = order_colors) +
#ggtitle("b.") +
ylab("proportion of species") +
geom_bar(position="fill", stat="identity") +
facet_wrap(~dimension, scales='free', ncol=1) +
theme_classic(base_size = 12)
?scale_fill_brewer
ggplot(phlyo_table, aes(x=threshold, y=Freq, fill = Var1)) +
scale_fill_brewer(palette = 1) +
#ggtitle("b.") +
ylab("proportion of species") +
geom_bar(position="fill", stat="identity") +
facet_wrap(~dimension, scales='free', ncol=1) +
theme_classic(base_size = 12)
phlyo_table
phlyo_table <- phlyo_table[-c(7, 18),]
ggplot(phlyo_table, aes(x=threshold, y=Freq, fill = Var1)) +
scale_fill_brewer(palette = 1) +
#ggtitle("b.") +
ylab("proportion of species") +
geom_bar(position="fill", stat="identity") +
facet_wrap(~dimension, scales='free', ncol=1) +
theme_classic(base_size = 12)
ggplot(phlyo_table, aes(x=threshold, y=Freq, fill = Var1)) +
scale_fill_brewer(palette = 'Set3') +
#ggtitle("b.") +
ylab("proportion of species") +
geom_bar(position="fill", stat="identity") +
facet_wrap(~dimension, scales='free', ncol=1) +
theme_classic(base_size = 12)
library(randomcoloR)
install.packages('randomcolorR')
library(randomcoloR)
colorz <- viridis::viridis(13)
ggplot(phlyo_table, aes(x=threshold, y=Freq, fill = Var1)) +
scale_fill_manual(values = colorz) +
#ggtitle("b.") +
ylab("proportion of species") +
geom_bar(position="fill", stat="identity") +
facet_wrap(~dimension, scales='free', ncol=1) +
theme_classic(base_size = 12)
colorz <- viridis::turbo(13)
ggplot(phlyo_table, aes(x=threshold, y=Freq, fill = Var1)) +
scale_fill_manual(values = colorz) +
#ggtitle("b.") +
ylab("proportion of species") +
geom_bar(position="fill", stat="identity") +
facet_wrap(~dimension, scales='free', ncol=1) +
theme_classic(base_size = 12)
v6_table_below
v6_table_above
phylo_plot <- ggplot(phlyo_table, aes(x=threshold, y=Freq, fill = Var1)) +
scale_fill_manual(values = colorz) +
#ggtitle("b.") +
ylab("proportion of species") +
geom_bar(position="fill", stat="identity") +
facet_wrap(~dimension, scales='free', ncol=1) +
theme_classic(base_size = 12)
combined_pcoa <- gridExtra::arrangeGrob(pcoa_pdp_plot, phylo_plot, ncol = 2)
combined_pcoa <- gridExtra::arrangeGrob(pcoa_pdp_plot, phylo_plot, ncol = 2)
ggsave("pcoa_full_supplementary_figure.pdf", combined_pcoa)
dir()
